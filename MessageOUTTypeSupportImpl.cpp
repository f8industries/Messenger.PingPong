/* Generated by opendds_idl.exe version 3.9 (ACE version 6.2a_p10) running on input file C:\OpenDDS-3.9\DevGuideExamples\DCPS\IDL\MessageOUT.idl */
#include "MessageOUTTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/PoolAllocator.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Messenger */



/* Begin STRUCT: MessageOUT */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger::MessageOUT& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.payload.in()) + 1;
}

bool operator<<(Serializer& strm, const Messenger::MessageOUT& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.payload.in());
}

bool operator>>(Serializer& strm, Messenger::MessageOUT& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.payload.out());
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger::MessageOUT> : MetaStruct {
  typedef Messenger::MessageOUT T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger::MessageOUT& typed = *static_cast<const Messenger::MessageOUT*>(stru);
    if (std::strcmp(field, "payload") == 0) {
      return typed.payload.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::MessageOUT)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "payload") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'payload' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'payload' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger::MessageOUT");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "payload") == 0) {
      return make_field_cmp(&T::payload, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::MessageOUT)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"payload", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "payload") == 0) {
      return &static_cast<const T*>(stru)->payload;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::MessageOUT)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "payload") == 0) {
      static_cast<T*>(lhs)->payload = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::MessageOUT)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "payload") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->payload.in(), static_cast<const T*>(rhs)->payload.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::MessageOUT)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger::MessageOUT>()
{
  static MetaStructImpl<Messenger::MessageOUT> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger::MessageOUT*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger::MessageOUT>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: MessageOUT */

/* End MODULE: Messenger */
